#!/bin/bash

# Yikwid Browser Builder
set -e

THIS_SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
THIS_SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

LW_GIT_REPO=https://codeberg.org/librewolf/source.git
LW_CLONE_TAG=$(cat "${THIS_SCRIPT_DIR}/build")
LW_CLONE_DIR=upstream-patched
YW_PATCH_DIR=yikwid-patched
YW_BUILD_DIR=yikwid-editing
YW_SETTINGS_REPO=https://github.com/yikwid/yikwid-browser-settings.git
YW_SETTIONS_TAG=master

upstream_cloned() {
    [ -d "${THIS_SCRIPT_DIR}/${LW_CLONE_DIR}" ]
}

show_help() {
    echo ""
    echo "Yikwid Browser Builder: Script to manage the build process."
    echo ""
    echo "Usage: ${THIS_SCRIPT_NAME} [OPTION...] [ACTION]"
    echo ""
    echo "ACTIONS:"
    echo "  init        - Initialize Yikwid Browser build environment"
    echo "  reset       - Reset the $YW_PATCH_DIR/ and $YW_BUILD_DIR/ (no update)"
    echo "  fullreset   - Reset the $LW_CLONE_DIR/ upstream repository (no update)"
    echo "  pull        - Update upstream code repository (with update)"
    echo "  apply       - Apply Yikwid patches to upstream code"
    echo "  diff        - See diff from original source and modified source"
    echo "OPTIONS:"
    echo "  -d|--debug  - Enable debug info for '${THIS_SCRIPT_NAME}'"
    echo "MAKE PASSTHRU ACTIONS:"
    if upstream_cloned; then
        cd "${THIS_SCRIPT_DIR}/${LW_CLONE_DIR}"
        make help | grep -v '^\s*$'
    else
        echo "  (must run '$THIS_SCRIPT_NAME init' before passthru options can be shown)"
    fi
    echo ""
}

if [[ $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    show_help
    exit 0
fi

cleanup_on_exit() {
    while popd 1>/dev/null 2>&1; do :; done
    rm -rf "${YW_PATCH_DIR}/.git" 2>/dev/null
    rm -rf "${YW_BUILD_DIR}/.git" 2>/dev/null
}

trap cleanup_on_exit SIGINT SIGTERM EXIT

verbose() {
    echo "[$(date "+%F %T")] $*"
}

stderr() {
    1>&2 echo "[$(date "+%F %T")] $*"
}

debug() {
    stderr "DEBUG: $*"
}

die() {
    stderr "ERROR: $*"
    exit 1
}

go_dir() {
    pushd "$1" 1>/dev/null 2>&1 || die "Could not change dir to $1"
}

go_back_dir() {
    popd 1>/dev/null 2>&1 || die "Could not popd to previous dir"
}

clone_upstream() {
    if ! which git 2> /dev/null; then
        die "Must have 'git' installed and available."
    fi
    git clone "$LW_GIT_REPO" "${THIS_SCRIPT_DIR}/${LW_CLONE_DIR}"
}

set_action() {
    declare -g ACTION
    if [[ -n $ACTION ]]; then
        die "Cannot set action to '$1' as it was already set to '$ACTION'."
    fi
    ACTION="$1"
}

parse_args() {
    declare -g -A OPTIONS
    OPTIONS[DEBUG]=0
    while [[ $# -gt 0 ]]; do
        case $1 in
        all|check|update|clean|veryclean|bootstrap|setup-wasi|fetch|dir|build|package|run|check-patchfail|check-fuzz|fixfuz)
            set_action passthru
            declare -g PASSTHRU="$1"
            shift;;
        init|reset|pull|apply|diff)
            set_action "$1"
            shift;;
        -d|--debug)
            OPTIONS[DEBUG]=1
            shift;;
        *)
            die "Unknown argument: $1"
        esac
    done
}

check_prerequisites() {
    APT_PKGS=(python3 python3-dev python3-pip)
    for APT_PKG in "${APT_PKG[@]}"; do
        if ! dpkg -s "$APT_PKG" > /dev/null 2>&1; then
            die "Missing required package ($APT_PKG) from: ${APT_PKG[*]}"
        fi
    done
}

user_prompt() {
    read -r -p "$* "
    printf '%s' "$REPLY"
}

apply_patch() {
    PATCH_PATH="$1"
    PATCH_DIR="$2"

    go_dir "$PATCH_DIR"
    if [[ $PATCH_PATH == *.git.patch ]]; then
        git init .
        git apply "${THIS_SCRIPT_DIR}/${PATCH_PATH}" || die "Could not apply git.patch $PATCH_PATH"
        rm -r .git
    else
        patch -p1 --input="${THIS_SCRIPT_DIR}/${PATCH_PATH}" || die "Could not apply patch $PATCH_PATH"
    fi
    go_back_dir
}

do_patches() {
    PATCH_DIR="$1"
    SOURCE_DIR="$2"

    for PATCH_PATH in "$PATCH_DIR/"*.patch; do
        apply_patch "$PATCH_PATH" "$SOURCE_DIR"
    done
}

add_lw_patches() {
    PATCH_DIR="$1"
    SOURCE_DIR="$2"

    for PATCH_PATH in "$PATCH_DIR/"*.patch; do
        cp "$PATCH_PATH" "${SOURCE_DIR}/patches"
        # TODO avoid duplicate lines
        echo "patches/$( basename "$PATCH_PATH" )" >> "${SOURCE_DIR}/assets/patches.txt"
    done
}

do_passthru() {
    debug "Starting do_passthru"
    PT_DIR="$1"
    PT_VERB="$2"
    make -C "$PT_DIR" "$PT_VERB"
}

do_init() {
    debug "Starting do_init"
    # TODO confirm required packages from patches/pre/no-sudo-please.patch
    # TODO confirm required packages from patches/lw/still-no-sudo.patch
    if ! upstream_cloned; then
        git clone --single-branch --branch "$LW_CLONE_TAG" "$LW_GIT_REPO" "$LW_CLONE_DIR"

        do_patches "patches/pre" "$LW_CLONE_DIR"

        git clone --single-branch --branch "$YW_SETTIONS_TAG" "$YW_SETTINGS_REPO" "$LW_CLONE_DIR/settings"

        add_lw_patches "patches/lw" "$LW_CLONE_DIR"

        do_passthru "${THIS_SCRIPT_DIR}/${LW_CLONE_DIR}" bootstrap

        do_reset "force"
    else
        die "Already initialized. Perhaps you meant to run 'reset' or 'pull' instead?"
    fi
}

do_reset() {
    debug "Starting do_reset"
    if upstream_cloned; then
        if [[ $1 != "force" ]]; then
            CONFIRM=$(user_prompt "Reset both $YW_PATCH_DIR/ and $YW_BUILD_DIR/ dirs, discarding changes? (y/N)")
            [[ $CONFIRM == 'y' ]] || die "Reset aborted."
        fi
        git -C "${LW_CLONE_DIR}" reset --hard
        git -C "${LW_CLONE_DIR}/settings" reset --hard

        rsync -a --del "${LW_CLONE_DIR}/" "${YW_PATCH_DIR}/"

        do_patches "patches/pre" "$YW_PATCH_DIR"
        add_lw_patches "patches/lw" "$YW_PATCH_DIR"
        mv "${YW_PATCH_DIR}/yikwid-${LW_CLONE_TAG}/lw/"* "${YW_PATCH_DIR}/yikwid-${LW_CLONE_TAG}/yw/"

        # XXX using LW_CLONE_TAG in place of version for now
        do_patches "patches/src" "${YW_PATCH_DIR}/yikwid-${LW_CLONE_TAG}"

        rsync -a --del "${YW_PATCH_DIR}/" "${YW_BUILD_DIR}/"
    else
        die "Not yet initialized. Perhaps you meant to run 'init' instead?"
    fi
}

do_fullreset() {
    debug "Starting do_fullreset"
    if [[ $1 != "force" ]]; then
        CONFIRM=$(user_prompt "Reset all three of $LW_CLONE_DIR/ $YW_PATCH_DIR/ $YW_BUILD_DIR/ dirs, discarding changes? (y/N)")
        [[ $CONFIRM == 'y' ]] || die "Reset aborted."
    fi
    rm -rf $LW_CLONE_DIR/ $YW_PATCH_DIR/ $YW_BUILD_DIR/
    do_init
}

do_pull() {
    :
}

do_apply() {
    :
}

do_diff() {
    go_dir "$THIS_SCRIPT_DIR"
    diff -urb --exclude-from=.diff_ignore "${YW_PATCH_DIR}/" "${YW_BUILD_DIR}/"
    go_back_dir
}

do_action() {
    if [[ -z $ACTION ]]; then
        die "You must pass an action to run; try '$THIS_SCRIPT_NAME help' to see options."
    elif [[ $ACTION == passthru ]]; then
        if ! upstream_cloned; then
            die "Cannot run passthru action '$PASSTHRU'; run '$THIS_SCRIPT_NAME init' first."
        fi

        do_passthru "${THIS_SCRIPT_DIR}/${YW_BUILD_DIR}" "$PASSTHRU"
    else
        if [[ ${OPTION[DEBUG]} -eq 1 ]]; then
            set -x
        fi
        do_$ACTION
    fi
}

parse_args "$@"
check_prerequisites
do_action
